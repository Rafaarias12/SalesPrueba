@page "/countries"
@inject IRepository repository
@inject NavigationManager navigatorManager
@inject SweetAlertService sweetAlertService


<h3>Paises</h3>

<a class="btn btn-primary" href="/countries/create">Nuevo País</a>



@if(Countries == null)
{
    <p>Cargando.... </p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>
                <th>País</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var country in Countries!)
            {
                <tr>
                    <td>
                        <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                    </td>
                    <td>
                        @country.Name
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");

        Countries = responseHttp.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
        });


        // var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        // {
        //     Title = "Confirmación",
        //     Text = "¿Deseas eliminar el registro?",
        //     Icon = SweetAlertIcon.Question,
        //     ShowCancelButton = true,
        //     CancelButtonText = "No",
        //     ConfirmButtonText = "Si"
        // });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var responseHttp = await repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if(responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }
}
